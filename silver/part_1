SELECT 
* 
FROM (
Select 
*,
row_number() Over(PARTITION BY cst_id order by cst_create_date desc) as flag_last
FROM bronze.crm_cust_info
)t where flag_last = 1;

INSERT INTO silver.crm_cust_info (cst_id, cst_key, cst_firstname, cst_lastname, cst_marital_status, cst_gndr, cst_create_date)
SELECT 
cst_id,
cst_key,
TRIM(cst_firstname) as cst_firstname, -- removed unwatned space for data consistency
TRIM(cst_lastname) as cst_lastname, -- removed unwatned space for data consistency
CASE WHEN UPPER(TRIM(cst_marital_status)) = 'S' THEN 'Single' -- date standarisation / data normalisation to readable format.
	WHEN UPPER(TRIM(cst_marital_status)) = 'M' THEN 'Married' -- date standarisation / data normalisation to readable format.
	ELSE NULL
	END cst_marital_status,
CASE WHEN UPPER(TRIM(cst_gndr)) = 'F' THEN 'Female' -- date standarisation / data normalisation to readable format.
	WHEN UPPER(TRIM(cst_gndr)) = 'M' THEN 'Male' -- date standarisation / data normalisation to readable format.
	ELSE 'n/a'
end cst_gndr,
cst_create_date
FROM (
Select 
*,
row_number() Over(PARTITION BY cst_id order by cst_create_date desc) as flag_last -- remove duplciates
FROM bronze.crm_cust_info
where cst_id IS NOT NULL 
)t 
where flag_last = 1; -- data filtering;

---------------------------------------------------------
select 
	prd_id,
	prd_key,
	REPLACE(SUBSTRING(prd_key, 1, 5), '-', '_') as cat_id, -- to join erp_px_cat_g1v2 and change _ to - (replace)
	SUBSTRING(prd_key, 7, LEN(prd_key)) as prd_key, --making is dynamic 
	trim(prd_nm),
	ISNULL(prd_cost, 0) as prd_cost,
	CASE
		WHEN UPPER(TRIM(prd_line)) = 'M' then 'Mountain'
		WHEN UPPER(TRIM(prd_line)) = 'R' then 'Road'
		WHEN UPPER(TRIM(prd_line)) = 'S' then 'Other Sales'
		WHEN UPPER(TRIM(prd_line)) = 'T' then 'Touring'
		else 'n/a'
		end as prd_line,
	CAST (prd_start_dt AS DATE) as prd_start_dt,
	CAST(DATEADD(DAY, -1, LEAD(prd_start_dt) OVER (PARTITION BY prd_key ORDER BY prd_start_dt)) AS date) AS prd_end_dt
from bronze.crm_prd_info



 
--where SUBSTRING(prd_key, 7, LEN(prd_key)) in 
--(select sls_prd_key from bronze.crm_sales_details);

--WHERE (REPLACE(SUBSTRING(prd_key, 1, 5), '-', '_') NOT IN -- to check the erp with the crm table 
--(SELECT DISTINCT ID FROM bronze.erp_px_cat_g1v2));

---INSERTING into the silver table for crm_prd_info--- 
	DROP TABLE silver.crm_prd_info;
CREATE TABLE silver.crm_prd_info 
(
	prd_id INT, 
	cat_id NVARCHAR(255),
	prd_key NVARCHAR(255), 
	prd_nm NVARCHAR(50),
	prd_cost INT,
	prd_line NVARCHAR(50),
	prd_start_dt DATE,
	prd_end_dt DATE,
	dwh_create_date DATETIME2 DEFAULT GETDATE()
	);

INSERT INTO silver.crm_prd_info (prd_id, cat_id, prd_key, prd_nm, prd_cost, prd_line, prd_start_dt, prd_end_dt)
select 
	prd_id,
	REPLACE(SUBSTRING(prd_key, 1, 5), '-', '_') as cat_id, -- to join erp_px_cat_g1v2 and change _ to - (replace)
	SUBSTRING(prd_key, 7, LEN(prd_key)) as prd_key, --making is dynamic 
	trim(prd_nm),
	ISNULL(prd_cost, 0) as prd_cost,
	CASE
		WHEN UPPER(TRIM(prd_line)) = 'M' then 'Mountain'
		WHEN UPPER(TRIM(prd_line)) = 'R' then 'Road'
		WHEN UPPER(TRIM(prd_line)) = 'S' then 'Other Sales'
		WHEN UPPER(TRIM(prd_line)) = 'T' then 'Touring'
		else 'n/a'
		end as prd_line,
	CAST (prd_start_dt AS DATE) as prd_start_dt,
	CAST(DATEADD(DAY, -1, LEAD(prd_start_dt) OVER (PARTITION BY prd_key ORDER BY prd_start_dt)) AS date) AS prd_end_dt
from bronze.crm_prd_info;

-------------------------------------------------------------------------------------

--check for unwanted spaces
select 
	trim(sls_ord_num) as sls_ord_numer,
	sls_prd_key,
	sls_cust_id,
	--sls_order_dt,
	CASE WHEN sls_order_dt =0 or len(sls_order_dt) <> 8 THEN NULL
		ELSE CAST(CAST(sls_order_dt as VARCHAR) AS DATE) -- change INT to VARCHAR then to date
	END as sls_order_dt,
	--sls_ship_dt,
		CASE WHEN sls_ship_dt =0 or len(sls_ship_dt) <> 8 THEN NULL
		ELSE CAST(CAST(sls_ship_dt as VARCHAR) AS DATE) -- change INT to VARCHAR then to date
	END as sls_ship_dt,
		CASE WHEN sls_due_dt =0 or len(sls_due_dt) <> 8 THEN NULL
		ELSE CAST(CAST(sls_due_dt as VARCHAR) AS DATE) -- change INT to VARCHAR then to date
	END as sls_due_dt,
	--sls_sales,
	CASE
	WHEN sls_sales is null OR sls_sales <=0 or sls_sales <> sls_quantity * ABS(sls_price)
		THEN sls_quantity * ABS(sls_price)
	ELSE sls_sales
END as sls_sales,
	sls_quantity,
	--sls_price
	CASE WHEN sls_price is NULL or sls_price <= 0
	THEN sls_sales / NULLIF(sls_quantity, 0)
	ELSE sls_price 
END as sls_price
from bronze.crm_sales_details
where sls_ord_num <> trim(sls_ord_num) -- checking for unwanted spaces;

-- checking for invalid dates
select 
NULLIF(sls_order_dt, 0) as sls_order_dt
from bronze.crm_sales_details
where sls_order_dt <= 0 or len(sls_order_dt) <> 8

-- check for invalid date orders
select 
*
from bronze.crm_sales_details
where sls_order_dt > sls_ship_dt or sls_order_dt > sls_due_dt;


--checking the calcuation for the sales, quantity and price.
SELECT distinct
sls_sales as old_sls_sales,
sls_quantity,
sls_price as old_sls_price,
CASE
	WHEN sls_sales is null OR sls_sales <=0 or sls_sales <> sls_quantity * ABS(sls_price)
		THEN sls_quantity * ABS(sls_price)
	ELSE sls_sales
END as sls_sales,

CASE WHEN sls_price is NULL or sls_price <= 0
	THEN sls_sales / NULLIF(sls_quantity, 0)
	ELSE sls_price 
END as sls_price

FROM bronze.crm_sales_details
WHERE sls_sales <> sls_quantity * sls_price
or sls_sales is null or sls_quantity is null or sls_price is null
order by sls_sales, sls_quantity, sls_price;


--inserting into the DDL silver crm_sales_details
	DROP TABLE silver.crm_sales_details;
CREATE TABLE silver.crm_sales_details
(
	sls_ord_num NVARCHAR(50),
	sls_prd_key NVARCHAR(50),
	sls_cust_id	INT,
	sls_order_dt DATE,
	sls_ship_dt DATE,
	sls_due_dt DATE,
	sls_sales INT,
	sls_quantity INT,
	sls_price INT,
	dwh_create_date DATETIME2 DEFAULT GETDATE()
	);


INSERT INTO silver.crm_sales_details (sls_ord_num, sls_prd_key, sls_cust_id, sls_order_dt, sls_ship_dt, sls_due_dt, sls_sales, sls_quantity, sls_price)

	select 
	trim(sls_ord_num) as sls_ord_numer,
	sls_prd_key,
	sls_cust_id,
	--sls_order_dt,
	CASE WHEN sls_order_dt =0 or len(sls_order_dt) <> 8 THEN NULL
		ELSE CAST(CAST(sls_order_dt as VARCHAR) AS DATE) -- change INT to VARCHAR then to date
	END as sls_order_dt,
	--sls_ship_dt,
		CASE WHEN sls_ship_dt =0 or len(sls_ship_dt) <> 8 THEN NULL
		ELSE CAST(CAST(sls_ship_dt as VARCHAR) AS DATE) -- change INT to VARCHAR then to date
	END as sls_ship_dt,
		CASE WHEN sls_due_dt =0 or len(sls_due_dt) <> 8 THEN NULL
		ELSE CAST(CAST(sls_due_dt as VARCHAR) AS DATE) -- change INT to VARCHAR then to date
	END as sls_due_dt,
	--sls_sales,
	CASE
	WHEN sls_sales is null OR sls_sales <=0 or sls_sales <> sls_quantity * ABS(sls_price)
		THEN sls_quantity * ABS(sls_price)
	ELSE sls_sales
END as sls_sales,
	sls_quantity,
	--sls_price
	CASE WHEN sls_price is NULL or sls_price <= 0
	THEN sls_sales / NULLIF(sls_quantity, 0)
	ELSE sls_price 
END as sls_price
from bronze.crm_sales_details;

select * from silver.crm_sales_details;


--------------------------------------------------------------------------
--bronze.erp_cust_az12;
select 
	--CID,
	CASE
		WHEN cid like 'NAS%' THEN SUBSTRING(CID, 4, LEN(cid)) -- len(cid) making is dynamic
		ELSE cid
	end AS CID,
	--BDATE,
	CASE WHEN BDATE > GETDATE() THEN  NULL
		 ELSE BDATE
	END AS BDATE,
	--GEN
		CASE WHEN UPPER(TRIM(gen)) IN ('F', 'FEMALE') THEN 'Female'
	WHEN UPPER(TRIM(gen)) IN ('M', 'MALE') THEN 'Male'
	ELSE 'n/a' 
	END AS GEN
from bronze.erp_cust_az12;

--check if customer oler than 100 years or greater than today's date 
select 
bdate
from bronze.erp_cust_az12
where bdate <'1924-01-01' or bdate > GETDATE();


--check if customer gender 
select distinct
GEN,
	CASE WHEN UPPER(TRIM(gen)) IN ('F', 'FEMALE') THEN 'Female'
	WHEN UPPER(TRIM(gen)) IN ('M', 'MALE') THEN 'Male'
	ELSE 'n/a' 
	END AS GEN
from bronze.erp_cust_az12;

--inserting into silver.erp_cust_az12

insert into silver.erp_cust_az12 (CID, BDATE, GEN)
select 
	--CID,
	CASE
		WHEN cid like 'NAS%' THEN SUBSTRING(CID, 4, LEN(cid)) -- len(cid) making is dynamic
		ELSE cid
	end AS CID,
	--BDATE,
	CASE WHEN BDATE > GETDATE() THEN  NULL
		 ELSE BDATE
	END AS BDATE,
	--GEN
		CASE WHEN UPPER(TRIM(gen)) IN ('F', 'FEMALE') THEN 'Female'
	WHEN UPPER(TRIM(gen)) IN ('M', 'MALE') THEN 'Male'
	ELSE 'n/a' 
	END AS GEN
from bronze.erp_cust_az12;

SELECT * from silver.erp_cust_az12;


--------------------------------------------------------------------------
--silver.erp_loc_a101;

select 
	CID,
	REPLACE((CID), '-','') AS cid_test,
	CNTRY
from bronze.erp_loc_a101
where REPLACE(CID, '-','') not in 
(select cst_key from silver.crm_cust_info)

select 
	cst_key
from silver.crm_cust_info;

-- joining table to check if it has worked

select 
	--CID,
	REPLACE((CID), '-','') AS cid_test,
	CASE WHEN trim(CNTRY) = 'DE' THEN 'Germany'
		 WHEN trim(CNTRY) IN ('US', 'USA') THEN 'United States'
		 WHEN trim(CNTRY) = '' or cntry IS NULL THEN 'n/a'
		 else trim(cntry)
		 end as cntry
	--CNTRY
from bronze.erp_loc_a101;


--check by doing subquery to check the tables
--where REPLACE(CID, '-','') not in 
--(select cst_key from silver.crm_cust_info)

--check cntry
select distinct(CNTRY)
from bronze.erp_loc_a101
order by cntry;


--inserting into table
insert into silver.erp_loc_a101 (CID, CNTRY)
select 
	--CID,
	REPLACE((CID), '-','') AS cid_test,
	CASE WHEN trim(CNTRY) = 'DE' THEN 'Germany'
		 WHEN trim(CNTRY) IN ('US', 'USA') THEN 'United States'
		 WHEN trim(CNTRY) = '' or cntry IS NULL THEN 'n/a'
		 else trim(cntry)
		 end as cntry
	--CNTRY
from bronze.erp_loc_a101;


select * from silver.erp_loc_a101;

---------------------------------------------
--SILVER.ERP_PX_CAT_G1V2

SELECT 
	ID,
	CAT,
	SUBCAT,
	MAINTENANCE
FROM bronze.ERP_PX_CAT_G1V2;

SELECT 
*
FROM SILVER.CRM_PRD_INFO;

--checking unwanted spaces // NO unwated spaces
select * from bronze.ERP_PX_CAT_G1V2
where cat <> TRIM(CAT);

select * from bronze.ERP_PX_CAT_G1V2
where SUBCAT <> TRIM(SUBCAT);

select * from bronze.ERP_PX_CAT_G1V2
where MAINTENANCE <> TRIM(MAINTENANCE);

-- data standardisation & consistency
select distinct
cat
from bronze.ERP_PX_CAT_G1V2;

select distinct
SUBCAT
from bronze.ERP_PX_CAT_G1V2;

select distinct
MAINTENANCE
from bronze.ERP_PX_CAT_G1V2;

--inserting into the silver.ERP_PX_CAT_G1V2

insert into silver.erp_px_cat_g1v2 (ID, CAT, SUBCAT, MAINTENANCE)
SELECT 
	ID,
	CAT,
	SUBCAT,
	MAINTENANCE
FROM bronze.ERP_PX_CAT_G1V2;
