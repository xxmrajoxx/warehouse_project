---------------------------------------------------------------------------
-------- now creating a new store procedure for the silver table ----------
---------------------------------------------------------------------------
-------- store procedure: load silver layer Bronze -> silver) -------------
---------------------------------------------------------------------------
 ------------------------Script purpose -----------------------------------
this store procedure pefors the etl (extract, transform, load) process to 
populate the silver schema tables from the bronze schema
actions:
  truncates silver tabls
  insert transformed and cleansed data from bronze into silver tables
---------------------------------------------------------------------------
  paraters:
  none
---------------------------------------------------------------------------
  useage example:
  exec silver.load_silver;
---------------------------------------------------------------------------

EXEC silver.load_silver;

CREATE OR ALTER PROCEDURE silver.load_silver AS
BEGIN

	DECLARE @start_time DATETIME, @END_TIME DATETIME, @batch_start_time DATETIME, @batch_end_time DATETIME;

		BEGIN TRY
		SET @batch_start_time = GETDATE()
		PRINT '================================';
		PRINT 'Loading Silver Layer';
		PRINT '================================';

		PRINT '================================';
		PRINT 'Loading CRM tables';
		PRINT '================================';
			
			SET @start_time = GETDATE();
			PRINT '>> truncating table: silver.crm_cust_info';
			TRUNCATE TABLE silver.crm_cust_info;
			PRINT '>> Inserting Data Into: silver.crm_cust_info'; 
			INSERT INTO silver.crm_cust_info (
				cst_id, 
				cst_key,
				cst_firstname, 
				cst_lastname, 
				cst_marital_status, 
				cst_gndr, 
				cst_create_date
			)
			SELECT 
				cst_id,
				cst_key,
				TRIM(cst_firstname) as cst_firstname, -- removed unwatned space for data consistency
				TRIM(cst_lastname) as cst_lastname, -- removed unwatned space for data consistency
				CASE 
					WHEN UPPER(TRIM(cst_marital_status)) = 'S' THEN 'Single' -- date standarisation / data normalisation to readable format.
					WHEN UPPER(TRIM(cst_marital_status)) = 'M' THEN 'Married' -- date standarisation / data normalisation to readable format.
					ELSE 'n/a'
				END cst_marital_status,
				CASE 
					WHEN UPPER(TRIM(cst_gndr)) = 'F' THEN 'Female' -- date standarisation / data normalisation to readable format.
					WHEN UPPER(TRIM(cst_gndr)) = 'M' THEN 'Male' -- date standarisation / data normalisation to readable format.
					ELSE 'n/a'
				end cst_gndr,
				cst_create_date
			FROM (
				Select 
				*,
				row_number() Over(PARTITION BY cst_id order by cst_create_date desc) as flag_last -- remove duplciates
			FROM bronze.crm_cust_info
			where cst_id IS NOT NULL 
			)t 
			where flag_last = 1; -- data filtering and removing duplicates, so if more than 1 then it will get excluded
			SET @end_time = GETDATE();
			PRINT '>> Load Duration: ' + CAST(DATEDIFF(second, @start_time, @end_time) as NVARCHAR) + ' SECONDS';
			PRINT '>> --------------';

			SET @start_time = GETDATE();
			PRINT '>> truncating table: silver.crm_prd_info';
			TRUNCATE TABLE silver.crm_prd_info;
			PRINT '>> Inserting Data Into: silver.crm_prd_info'; 
			INSERT INTO silver.crm_prd_info (
				prd_id,
				cat_id, 
				prd_key,
				prd_nm, 
				prd_cost, 
				prd_line,
				prd_start_dt,
				prd_end_dt
			)
			select 
				prd_id,
				REPLACE(SUBSTRING(prd_key, 1, 5), '-', '_') as cat_id, -- to join erp_px_cat_g1v2 and change _ to - (replace)
				SUBSTRING(prd_key, 7, LEN(prd_key)) as prd_key, --making is dynamic 
				trim(prd_nm),
				ISNULL(prd_cost, 0) as prd_cost,
				CASE
					WHEN UPPER(TRIM(prd_line)) = 'M' then 'Mountain'
					WHEN UPPER(TRIM(prd_line)) = 'R' then 'Road'
					WHEN UPPER(TRIM(prd_line)) = 'S' then 'Other Sales'
					WHEN UPPER(TRIM(prd_line)) = 'T' then 'Touring'
					else 'n/a'
					end as prd_line,
				CAST (prd_start_dt AS DATE) as prd_start_dt,
				CAST(DATEADD(DAY, -1, LEAD(prd_start_dt) OVER (PARTITION BY prd_key ORDER BY prd_start_dt)) AS date) AS prd_end_dt
			from bronze.crm_prd_info;
			SET @end_time = GETDATE();
			PRINT '>> Load Duration: ' + CAST(DATEDIFF(second, @start_time, @end_time) as NVARCHAR) + ' SECONDS';
			PRINT '>> --------------';

			SET @start_time = GETDATE();
			PRINT '>> truncating table: silver.crm_sales_details';
			TRUNCATE TABLE silver.crm_sales_details;
			PRINT '>> Inserting Data Into: silver.crm_sales_details'; 
			INSERT INTO silver.crm_sales_details (
				sls_ord_num, 
				sls_prd_key,
				sls_cust_id, 
				sls_order_dt,
				sls_ship_dt,
				sls_due_dt, 
				sls_sales,
				sls_quantity,
				sls_price
			)
			select 
				trim(sls_ord_num) as sls_ord_numer,
				sls_prd_key,
				sls_cust_id,
				CASE 
					WHEN sls_order_dt =0 or len(sls_order_dt) <> 8 THEN NULL
					ELSE CAST(CAST(sls_order_dt as VARCHAR) AS DATE) -- change INT to VARCHAR then to date
				END as sls_order_dt,
				CASE 
					WHEN sls_ship_dt =0 or len(sls_ship_dt) <> 8 THEN NULL
					ELSE CAST(CAST(sls_ship_dt as VARCHAR) AS DATE) -- change INT to VARCHAR then to date
				END as sls_ship_dt,
				CASE 
					WHEN sls_due_dt =0 or len(sls_due_dt) <> 8 THEN NULL
					ELSE CAST(CAST(sls_due_dt as VARCHAR) AS DATE) -- change INT to VARCHAR then to date
				END as sls_due_dt,
				CASE
					WHEN sls_sales is null OR sls_sales <=0 or sls_sales <> sls_quantity * ABS(sls_price) THEN sls_quantity * ABS(sls_price)
					ELSE sls_sales
				END as sls_sales,
				sls_quantity,
				CASE 
					WHEN sls_price is NULL or sls_price <= 0
					THEN sls_sales / NULLIF(sls_quantity, 0)
				ELSE sls_price 
			END as sls_price
			from bronze.crm_sales_details;
			SET @end_time = GETDATE();
			PRINT '>> Load Duration: ' + CAST(DATEDIFF(second, @start_time, @end_time) as NVARCHAR) + ' SECONDS';
			PRINT '>> --------------';

			SET @start_time = GETDATE();
			PRINT '>> truncating table: silver.erp_cust_az12';
			TRUNCATE TABLE silver.erp_cust_az12;
			PRINT '>> Inserting Data Into: silver.erp_cust_az12'; 
			insert into silver.erp_cust_az12 (
				CID,
				BDATE,
				GEN
			)
			select 
				CASE
					WHEN cid like 'NAS%' THEN SUBSTRING(CID, 4, LEN(cid)) -- len(cid) making is dynamic
					ELSE cid
				end AS CID,
				CASE WHEN BDATE > GETDATE() THEN  NULL
					 ELSE BDATE
				END AS BDATE,
					CASE WHEN UPPER(TRIM(gen)) IN ('F', 'FEMALE') THEN 'Female'
				WHEN UPPER(TRIM(gen)) IN ('M', 'MALE') THEN 'Male'
				ELSE 'n/a' 
				END AS GEN
			from bronze.erp_cust_az12;
			SET @end_time = GETDATE();
			PRINT '>> Load Duration: ' + CAST(DATEDIFF(second, @start_time, @end_time) as NVARCHAR) + ' SECONDS';
			PRINT '>> --------------';

			SET @start_time = GETDATE();
			PRINT '>> truncating table: silver.erp_loc_a101';
			TRUNCATE TABLE silver.erp_loc_a101;
			PRINT '>> Inserting Data Into: silver.erp_loc_a101'; 
			insert into silver.erp_loc_a101 (
				CID,
				CNTRY
			)
			select 
				REPLACE((CID), '-','') AS cid_test,
				CASE WHEN trim(CNTRY) = 'DE' THEN 'Germany'
					 WHEN trim(CNTRY) IN ('US', 'USA') THEN 'United States'
					 WHEN trim(CNTRY) = '' or cntry IS NULL THEN 'n/a'
					 else trim(cntry)
					 end as cntry
			from bronze.erp_loc_a101;
			SET @end_time = GETDATE();
			PRINT '>> Load Duration: ' + CAST(DATEDIFF(second, @start_time, @end_time) as NVARCHAR) + ' SECONDS';
			PRINT '>> --------------';

			SET @start_time = GETDATE(); 
			PRINT '>> truncating table: silver.erp_px_cat_g1v2';
			TRUNCATE TABLE silver.erp_px_cat_g1v2;
			PRINT '>> Inserting Data Into: silver.erp_px_cat_g1v2'; 
			insert into silver.erp_px_cat_g1v2 (
				ID,
				CAT,
				SUBCAT,
				MAINTENANCE
			)
			SELECT 
				ID,
				CAT,
				SUBCAT,
				MAINTENANCE
			FROM bronze.ERP_PX_CAT_G1V2;
			SET @end_time = GETDATE();
			PRINT '>> Load Duration: ' + CAST(DATEDIFF(second, @start_time, @end_time) as NVARCHAR) + ' SECONDS';
			PRINT '>> --------------';

			SET @batch_end_time = GETDATE()
			PRINT '========================================='
			PRINT 'loading Silver Layer is Completed';
			PRINT '	- total Load Duration ' + CAST(DATEDIFF(SECOND, @batch_start_time, @batch_end_time) AS NVARCHAR) + ' Seconds';
			PRINT '========================================='

		END TRY
		BEGIN CATCH
			PRINT '========================================='
			PRINT 'error occured during loading Silver layer'
			PRINT 'error message' +  Error_message();
			PRINT 'error message' +  cast (Error_number() as NVARCHAR);
			PRINT 'error message' +  cast (Error_state() as NVARCHAR);
			PRINT  '========================================'
		END CATCH

END
